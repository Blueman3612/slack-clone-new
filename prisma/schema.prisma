generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  status          UserStatus?
  role            String    @default("USER")
  isAI            Boolean   @default(false)
  aiModel         String?   // e.g., "blueman", "other-bot", etc.

  accounts        Account[]
  sessions        Session[]
  messages        Message[]
  channels        Channel[] @relation("ChannelMembers")
  receivedMessages Message[] @relation("ReceivedMessages")
  reactions       Reaction[]
  
  // New server relations
  ownedServers    Server[]  @relation("ServerOwner")
  memberOfServers Server[]  @relation("ServerMembers")
}

// New Server model
model Server {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String
  password    String    // Hashed password for joining
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner       User      @relation("ServerOwner", fields: [ownerId], references: [id])
  ownerId     String
  members     User[]    @relation("ServerMembers")
  channels    Channel[]

  @@index([ownerId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Add file attachment fields
  fileUrl   String?
  fileName  String?
  fileType  String?
  fileSize  Int?
  
  // User who sent the message
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  // For direct messages
  receiverId String?
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  // For channel messages
  channelId  String?
  channel    Channel? @relation(fields: [channelId], references: [id])
  
  // For thread support
  isThreadStarter Boolean @default(false)
  threadId   String?
  parentMessage Message? @relation("ThreadMessages", fields: [threadId], references: [id])
  threadMessages Message[] @relation("ThreadMessages")
  
  // Reactions
  reactions  Reaction[]
  replyCount Int     @default(0)

  @@index([userId])
  @@index([receiverId])
  @@index([channelId])
  @@index([threadId])
}

model Channel {
  id        String    @id @default(cuid())
  name      String    @unique
  messages  Message[]
  members   User[]    @relation("ChannelMembers")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // New server relation
  server    Server    @relation(fields: [serverId], references: [id])
  serverId  String

  @@index([serverId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  message   Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([messageId])
  @@index([userId])
}

model UserStatus {
  id        String   @id @default(cuid())
  userId    String   @unique
  emoji     String?
  text      String?
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 